INSTALLING DOCKER
=================
//  install prereq for docker-ce
yum install -y yum-utils device-mapper-persistent-data lvm2

// add the Docker CE repository
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

// install docker-ce
yum install docker-ce

//verify that the 'docker' group exists
cat /etc/group | grep docker

//add the permissions to the user to run docker without sudo
usermod -aG docker user

//remove previous versions of docker
apt-get purge -y docker-engine && apt-get autoremove --purge -y docker-engine &&
rm -rf /var/lib/docker


DOCKER DAEMON
=============
systemctl stop/start/restart docker


IMAGES
======
//pull an image from repo
docker pull image_name

//list images
docker images

//tag the 'ubuntu:latest' image to refer to it with a shorter name
docker tag ubuntu:latest my:ubuntu


CONTAINERS
==========
//start a container based on the image. Container starts connected to the current terminal in interactive mode and runs the bash command so you are logged in to the command prompt on the container once it boots.
docker run -it centos:6 /bin/bash

// list all stopped (-a) containers
docker ps -a

//create (not run) a container called "my_container", create it with parameters that will allow it to run interactively and attached to the local console running the bash shell.
docker create -it --name="my-container" ubuntu:latest /bin/bash

//create an interactive container, that will be attached to Terminal and use Google Public DNS, and use Domain Search "mydomain.local"
docker container run -it --name mycontainer --dns 8.8.8.8 --dns-search "mydomain.local" ubuntu

//using the name or ID of the container, commit the changes we made within it to a new base image
docker commit b237d65fd197 newname

//using json formatting find the IPaddress of the container
docker container inspect --format="{{.NetworkSettings.Networks.bridge.IPAddress}}" container_name

//start a container
docker start my-container

//stop a container
docker stop container_name

//remove a container
docker rm container_name

//remove all containers
docker rm `docker ps -a -q`


DOCKER SERVICES
===============
//start service
service docker start

//stop service
service docker stop


SWARM
=====
//initialize the swarm cluster
docker swarm init --advertise-addr 172.31.118.114

//retrieve the token for a worker to be added to the swarm
docker swarm join-token worker

//retrieve the token for a manager to be added to the swarm
docker swarm join-token manager

//join a swarm
docker swarm join --token SWMTKN-1-1anvcitaky0o7sp39qhzraucmcjm0wm2828tbzdr7wa0pauz5d-08pkm4jd4pbp1oyfbolxy0bav     172.31.118.144:2377

//display all of the nodes within your cluster
docker node ls

//display ALL information about the system that Docker can see along with the details of the cluster name, management nodes and nodes joined
docker info

//create a service in the swarm cluster
docker service create --name service_name -p 80:80 --replicas 3 httpd

//display services that are currently running
docker service ls

//get the node the service is currently running on
docker service ps service_name

//scale up services
docker service scale service_name=3

//leave the swarm
docker swarm leave


VOLUMES
=======
//create a storage volume
docker volume create test-volume

//display all the Docker storage volumes
docker volume ls

//display all the attributes of 'test-volume'
docker volume inspect test-volume

//remove the newly created 'test-volume'
docker volume rm test-volume


NETWORK
=======
//display existing Docker networks and names on your host
docker network ls

//create a new network with the 'bridge' driver; that assigns IP addresses in the '192.168.1.0/24' network range, uses a gateway address of 192.168.1.250
docker network create --driver=bridge --subnet=192.168.1.0/24 --gateway=192.168.1.250 dev_bridge

//create a container called 'testweb' that's assigned to new 'dev_bridge' network on start
docker run -d --name testweb --network=dev_bridge httpd

//using the appropriately formatted Docker command output, display the container's IP(s) to include the new network
docker container inspect --format="{{.NetworkSettings.Networks.dev_bridge.IPAddress}}" testweb
