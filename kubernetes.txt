CONFIGURE THE FIRST CLUSTER
===========================
//pass in a flag to the deployment script so K8s knows how to configure itself
sudo kubeadm init --pod-network-cidr=10.244.0.0/16

//take note of the token for other nodes to be join:
kubeadm join --token --discovery-token-ca-cert-hash sha256:
kubeadm join 172.31.103.255:6443 --token s7s0e5.r5cjb997rmhq0ju6 --discovery-token-ca-cert-hash sha256:d9c4dd31f89d3b289ad822ee95893e493fe43fa062f53cb15f5986130ece2260

mkdir -p $HOME/.kube
//move the configuration files to a location usable by your local user
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

//install pod networking
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

//see pods list
kubectl get pods --all-namespaces
//see nginx pods
kubectl get pods -l app=nginx
//see pods with nodes they are running on
kubectl get pods -o wide


KUBERNETES YAML
===============
apiVErsion: v1
kind: Pod
metadata:
  name: busybox
spec:
containers:
  -name: busybox
   image: busybox
   command:
    - sleep
    - "3600"


RUN A JOB
=========
//run a job from a yaml file
kubectl create -f sample-job.yaml

//check the status of the job
kubectl describe jobname

//look at the log of the executed command
kubectl logs podname

//delete the pod
kubectl delete -f filename.yaml
kubectl delete pod podname
kubectl delete pod/podname


NODES
=====
//see nodes list and the current status of all nodes
kubtctl get nodes

//see what pods are running on the cluster/node
kubectl describe node node-name

//list all pods and which nodes they are currently running on
kubectl get pods --all-namespaces -o wide

//see what pods are running in the kube-system namespace
kubectl get pods -n kube-system

//get all pods, even the ones that shut down
kubectl get pods --show-all


DEPLOYMENTS
===========
//deployments list
kubectl get deployments

//deployment status
kubectl describe deployment deployment-name
kubectl get pods name-of-pods -o wide
kubectl get pods -l app=nginx -o wide

//get the full yaml - restore the initial yaml file
kubectl get deployment nginx-deployment -o yaml

//update the deployment to use the 1.8 version of the nginx container and roll it out
kubectl set image deployment/nginx-deployment nginx=nginx:1.8

//deployment status
kubectl rollout status deployment nginx-deployment

//undo deployment
kubectl rollout undo deployment/nginx-deployment --to-revision=1

//apply changes made in the yaml file
kubectl apply -f nginx-deployment.yaml

//view the deployment history
kubectl rollout history deployment nginx-deployment

//roll back to a specific state
kubectl rollout history deployment nginx-deployment --revision=x

//scale replicas
kubectl scale deployment/nginx-deployment --replicas=3

CONFIGMAPS
==========

kubectl create configmap my-map --from-literal=school=LinuxAcademy

kubectl get configmaps

kubectl describe configmaps my-map

kubectl get configmaps -o yaml



LABELS
======
kubectl label pod podname (app=nginx) sample=label (--all -n default)

//list all running pods in the default namespace that have the key/value pair running=beforeLabels.
kubectl get pods -l running=beforeLabels -n default

//label all pods in the default namespace with the key/value pair tier=linuxAcademyCloud.
kubectl label pods --all -n default tier=linuxAcademyCloud

//list all pods in the default namespace with the key/value pair running=afterLabels and tier=linuxAcademyCloud
kubectl get pods -l running=afterLabels -l tier=linuxAcademyCloud
